# -*- coding: utf-8 -*-
"""
Created on Tue Jan 17 17.09 2023

@author: Paolo
"""
#this dynamic modelling code containig the following reactions 
#1) Ribulose-5-Phosphate  (R5P) → 3,4,Dihydroxy-2-butanone-4-phosphate (D2B4P) (enzyme is RibA) 
#2) D2B4P → 6,7-Dimethyl-8-ribityl lumazine (D8RL) (Enzyme is RibH) 
#3) D8RL → Riboflavin (Enzyme is RibE) 
#4) Riboflavin → FMN (Enzyme is RibC)  
#5) FMN → FAD   (Enzyme is RibC) 
#6)purine pathway 

# plotting utility from Tellurium documentation
def my_plot(r, result, sizeX=6, sizeY=4):

    import pylab as p

    if result is None:
        raise Exception("no simulation result")

    # assume result is a standard numpy array

    selections = r.timeCourseSelections

    if len(result.shape) != 2 or result.shape[1] != len(selections):
        raise Exception("simulation result columns not equal to number of selections,"
                        "likely a simulation has not been run")

    times = result[:,0]

    p.figure(figsize=(sizeX, sizeY))
   
    for i in range(1, len(selections)):
        series = result[:,i]
        name = selections[i]
        p.plot(times, series, label=str(name))
       
    p.legend()
 
    p.show()


import tellurium as te

MM = '''
model Michaelis_Menten
 
  // Species initializations:
  GTP = 5e-7;
  GTP_RibA = 0;
  DARPP = 0;
  RibD = 2e-7;
  DARPP_RibD = 0;
  ARPP = 0;
  RibG = 2e-7;
  ARPP_RibG = 0;
  ArPP = 0;
  Unknown = 2e-7;
  ArPP_Unknown = 0;
  ArP = 0;
  ArP_RibH = 0;
  R5P  = 5e-7;
  RibA = 2e-7;
  R5P_RibA = 0;
  D2B4P = 5e-7;
  RibH = 2e-7;
  D2B4P_RibH  = 0;
  D8RL = 5e-7;
  RibE = 2e-7;  
  D8RL_RibE = 0;
  Riboflavin = 0;
  RibC = 2e-7;
  Riboflavin_RibC =0;
  FMN = 0;
  FMN_RibC = 0;
  FAD =0;
 
  // Reactions:
  RibA + GTP -> GTP_RibA;                  (k1 * RibA * GTP);
  GTP_RibA -> RibA + GTP;                  (k1r * GTP_RibA);
  GTP_RibA -> RibA + DARPP;                (k2 * GTP_RibA);
  RibD + DARPP -> DARPP_RibD;              (k1 * RibD * DARPP);
  DARPP_RibD -> RibD + DARPP;              (k1r * DARPP_RibD);
  DARPP_RibD -> RibD + ARPP;               (k2 * DARPP_RibD);
  RibG + ARPP -> ARPP_RibG;                (k1 * RibG * ARPP);
  ARPP_RibG -> RibG + ARPP;                (k1r * ARPP_RibG);
  ARPP_RibG -> RibG + ArPP;                (k2 * ARPP_RibG);
  Unknown + ArPP -> ArPP_Unknown;          (k1 * Unknown * ArPP);
  ArPP_Unknown -> Unknown + ArPP;          (k1r * ArPP_Unknown);
  ArPP_Unknown -> Unknown + ArP;           (k2 * ArPP_Unknown);
  RibH + ArP -> ArP_RibH;                  (k1 * RibH * ArP);
  ArP_RibH -> RibH + ArP;                  (k1r * ArP_RibH);
  ArP_RibH -> RibH + D8RL;                 (k2 * ArP_RibH);  
  RibA + R5P -> R5P_RibA;                  (k1 * RibA * R5P);
  R5P_RibA   -> RibA + R5P;                (k1r * R5P_RibA);
  R5P_RibA   -> RibA + D2B4P;              (k2 * R5P_RibA);
  RibH + D2B4P -> D2B4P_RibH;              (k1 * RibH * D2B4P);
  D2B4P_RibH   -> RibH + D2B4P;            (k1r * D2B4P_RibH);
  D2B4P_RibH   -> RibH + D8RL;             (k2 * D2B4P_RibH);
  RibE + D8RL -> D8RL_RibE;                (k1 * RibE * D8RL);
  D8RL_RibE   -> RibE + D8RL;              (k1r * D8RL_RibE);
  D8RL_RibE   -> RibE + Riboflavin;        (k2 * D8RL_RibE);
  RibC + Riboflavin -> Riboflavin_RibC;    (k1 * RibC * Riboflavin);
  Riboflavin_RibC   -> RibC + Riboflavin;  (k1r * Riboflavin_RibC);
  Riboflavin_RibC   -> RibC + FMN;         (k2 * Riboflavin_RibC);
  RibC + FMN -> FMN_RibC;                  (k1 * RibC * FMN);
  FMN_RibC -> RibC + FMN;                  (k1r * FMN_RibC);
  FMN_RibC -> RibC + FAD;                  (k2 * FMN_RibC);

  // Variable initialization:
  k1  = 1e6;
  k1r = 1e-4;
  k2  = 0.1;
end'''

r = te.loada(MM)
result = r.simulate(0, 100, 1000)

# plot the simulation output
#r.plot()
my_plot(r, result, sizeX=12, sizeY=8)

# export to SBML
r.exportToSBML('MMant3.xml', current = False)
