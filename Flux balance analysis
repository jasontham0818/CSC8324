# -*- coding: utf-8 -*-
"""

@author: Paolo
"""
#modified by Jason Tham

# plotting utility from Tellurium documentation
def my_plot(r, result, sizeX=6, sizeY=4):

    import pylab as p

    if result is None:
        raise Exception("no simulation result")

    # assume result is a standard numpy array

    selections = r.timeCourseSelections

    if len(result.shape) != 2 or result.shape[1] != len(selections):
        raise Exception("simulation result columns not equal to number of selections,"
                        "likely a simulation has not been run")

    times = result[:,0]

    p.figure(figsize=(sizeX, sizeY))
   
    for i in range(1, len(selections)):
        series = result[:,i]
        name = selections[i]
        p.plot(times, series, label=str(name))
       
    p.legend()
 
    p.show()


import tellurium as te

MM = '''
model Michaelis_Menten
 
  // Species initializations:
  D8RL = 5e-7;
  RibE = 2e-7;  
  D8RL_RibE = 0;
  Riboflavin = 0;
 
  // Reactions:
  Synthesis:    -> D8RL;       (k_s);                     //synthesis of substrate
  Biomass:      Riboflavin ->; (k_d*Riboflavin);          //consumption of Riboflavin
 
  Binding:      RibE + D8RL  -> D8RL_RibE;           (k1 * RibE * D8RL);
  Dissociation: D8RL_RibE    -> RibE + D8RL;         (k1r * D8RL_RibE);
  Conversion:   D8RL_RibE    -> RibE + Riboflavin;   (k2 * D8RL_RibE);
 
  // Variable initialization:
  k1  = 1e6;
  k1r = 1e-4;
  k2  = 0.1;
   
  k_s = 0;
  k_d = 0;
end'''

r = te.loada(MM)
result = r.simulate(0, 100, 1000)

# plot the simulation output
#r.plot()
my_plot(r, result, sizeX=12, sizeY=8)

# export to SBML
r.exportToSBML('Practical6.xml', current = False)
